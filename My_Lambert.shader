/*Writing my own Lambert Lighting Model*/

Shader "Binigya/MyLambertLighting"
{

	Properties
	{
		
		_Color("Base Color", Color) = (1,1,1,1)
		
	}
	
	
	SubShader
	{
	
		Tags
		{
			"Queue" = "Geometry"
		}
	
		CGPROGRAM
		#pragma surface surf BasicLambert
		
		half4 LightingBasicLambert (SurfaceOutput s, half3 lightDir, half atten)
		
		//SurfaceOutput = the surface shader output model 
		//lightDir = direction of the light source
		//atten = attenuation, it is the loss of intensity as the light travels
		
		{
			//As this is the Lambert, so only the normal of the surface and the source vector are considered
			//So, find the dot product of the light source direction and the surface normals
			
			half NdotL = dot(s.Normal, lightDir); //1 if Source is over the Normal, thus, the brightest
			half4 c; //4 rgba values to return i.e the color generated by the lighting
			c.rgb = s.Albedo * _LightColor0.rgb * (NdotL * atten);
			
			//_LightColor0.rgb is the color of the light in the scene
			//It is defined in the #include directives in full code
			//It includes colors of all the lights that will affect our object
			
			c.a = s.Alpha; //set the alpha value
			
			return c;  //It is not assigned to a surface, but it just gets returned and Unity uses this color to put in the pixel
		
		}
		
		float4 _Color;
		
		struct Input{
		
			float2 uv_MainTex;
		
		};
		
		void surf(Input IN, inout SurfaceOutput o)
		{
		
			o.Albedo = _Color.rgb;
		
		}
		
		ENDCG
	
	}
	
	Fallback "Diffuse"


}